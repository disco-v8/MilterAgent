# =============================================================================
#filter[(filter_name)] = キー:(!)正規表現:AND/OR、REJECT/WARN/ACCEPT
#  キーには以下が指定可能：
#    - 生ヘッダー名（例: header_from, header_to, header_subject, header_message-id, ...）
#      → Milterで受信したメールヘッダーそのまま（複数値はカンマ区切り）
#    - デコード後の値（例: decode_from, decode_to, decode_subject, decode_text, decode_html）
#      → mail-parserでパース・デコード済みの値（アドレス整形済み、本文デコード済み）
#  例：
#    filter[@example] = "header_from:@example.com:ACCEPT"      # 生ヘッダーのFrom判定
#    filter[@decode] = "decode_from:@example.com:REJECT"        # デコード済みFrom判定
#    filter[text] = "decode_text:ウイルス:REJECT"                # デコード済み本文判定
#    filter[subject] = "header_subject:SPAM:WARN"               # 生ヘッダーのSubject判定
#    filter[html] = "decode_html:<script:REJECT"                # デコード済みHTML本文判定
#　複合判定も可能：
#    filter[example] = "decode_from:user1@example.com:AND", "decode_from:!Taro.Yamada:REJECT"  # 送信元がuser1@example.comかつ、Taro.Yamadaが含まれていなければREJECT
#  ※AND/ORや!否定、複数条件も記述可能
#　複数行記述も可能：
#    # 送信元がuser1@example.comかつ、Taro.Yamadaが含まれていなければREJECT
#    filter[example] = "decode_from:user1@example.com:AND",
#        "decode_from:!Taro.Yamada:REJECT"
#    # 送信元がuser1@example.comかつ、Taro.Yamadaが含まれていなければREJECT
#    filter[example] = 
#        "decode_from:user1@example.com:AND",
#        "decode_from:!Taro.Yamada:REJECT"
#  ※上記の複合判定はいずれも同じものと解釈されます。
#  ※DROP(DISCARD)も実装してありますが、PostfixなどのMTAのログにはMTA既定のメッセージしか出ませんので、REJECTやWARNを推奨します。
# =============================================================================
# Reject example: Sender address is youraddress@example.com, but name is not YourName
filter[yourname] = 
    "decode_from:(youraddress@example.com|youraddress@example.net):AND",
    "decode_from:!YourName:REJECT"
